#!/bin/bash

set -e

# Unset GREP_OPTIONS to avoid deprecation warning
unset GREP_OPTIONS

# Default values
FORCE_HSS=0
PROGRAM=0
BITSTREAM_ONLY=0
CREATE_ONLY=0
SYNTHESIZE_ONLY=0
PROGRAM_ONLY=0
SYNTHESIS_ERRORS=0
FULL_SYNTHESIS_LOG=0

usage() {
    echo "Usage: $0 GATEWARE-DIR [options]"
    echo "Options:"
    echo "  -f, --force-hss           Force the build of the HSS"
    echo "  -p, --program             Program the FPGA/bootloader after building"
    echo "  -b, --bitstream-only      Generate bitstream only, skip Libero project generation"
    echo "  -c, --create-only         Only create the Libero design, skip the build"
    echo "  -s, --synthesize-only     Only synthesize the design, skip the build"
    echo "  -e, --synthesis-errors    Show synthesis errors from a previous build"
    echo "  -l, --full-synthesis-log  Show the full synthesis log"
    echo "  --program-only            Program the device only, skip the build"
}

# Check if all required tools are available
check_tool_status() {
    # Check for Libero
    if ! command -v libero &> /dev/null; then
        echo "Error: libero not found in path"
        exit 1
    fi

    # Check for PolarFire SoC MSS Configurator
    if ! command -v pfsoc_mss &> /dev/null; then
        echo "Error: polarfire soc mss configurator not found in path"
        exit 1
    fi

    # Check for SoftConsole installation directory
    if [ -z "$SC_INSTALL_DIR" ]; then
        echo "Error: SC_INSTALL_DIR environment variable not set, please set this variable and point it to the"
        echo "appropriate SoftConsole installation directory to run this script"
        exit 1
    fi

    # Check for FPGENPROG environment variable
    if [ -z "$FPGENPROG" ]; then
        echo "Error: FPGENPROG environment variable not set, please set this variable and point it to the appropriate"
        echo "FPGENPROG executable to run this script"
        exit 1
    fi

    # Check for FPExpress if programming is requested
    if [ $PROGRAM -eq 1 ] || [ $PROGRAM_ONLY -eq 1 ]; then
        if ! command -v FPExpress &> /dev/null; then
            echo "Error: FPExpress not found in path"
            exit 1
        fi
    fi

    # Check for RISC-V toolchain
    if ! echo "$PATH" | grep -q "riscv-unknown-elf-gcc"; then
        echo "The path to the RISC-V toolchain needs to be set in PATH to run this script"
        exit 1
    fi
}

make_mss_config() {
    echo "================================================================================"
    echo "                          Generating MSS configuration"
    echo "================================================================================"
    if [ -f "$MSS_CONFIG_XML" ]; then
        echo "MSS configuration already exists"
        return
    fi

    config_file="$BASE_DIR/MSS.cfg"
    output_dir="$BUILD_DIR/mss-config"
    mkdir -p "$output_dir"

    pfsoc_mss -GENERATE -CONFIGURATION_FILE:$config_file -OUTPUT_DIR:$output_dir
}

build_hss() {
    echo "================================================================================"
    echo "                       Build Hart Software Services (HSS)"
    echo "================================================================================"

    if [ -f "$HSS_HEX" ] && [ $FORCE_HSS -eq 0 ]; then
        echo "HSS build skipped"
        return
    fi
    board_name=mpfs-beaglev-fire
    board_dir="$HSS_DIR/boards/$board_name"

    cd $HSS_DIR
    if [ ! -f ".config" ]; then
        echo "No .config file found in HSS directory, copying default config"
        cp $BASE_DIR/hss.default-config .config
    fi

    echo "Copying MSS configuration"
    cp $MSS_CONFIG_XML $board_dir/soc_fpga_design/xml/

    echo "Building HSS"
    make BOARD=$board_name
    cp $HSS_HEX $BUILD_DIR/hss-envm-wrapper-bm1-p0.hex
}

#####################
# Parse arguments
#####################
POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--force-hss)
            FORCE_HSS=1
            shift
            ;;
        -p|--program)
            PROGRAM=1
            shift
            ;;
        -b|--bitstream-only)
            BITSTREAM_ONLY=1
            shift
            ;;
        -c|--create-only)
            CREATE_ONLY=1
            shift
            ;;
        -s|--synthesize-only)
            SYNTHESIZE_ONLY=1
            shift
            ;;
        -e|--synthesis-errors)
            SYNTHESIS_ERRORS=1
            shift
            ;;
        -l|--full-synthesis-log)
            FULL_SYNTHESIS_LOG=1
            shift
            ;;
        --program-only)
            PROGRAM_ONLY=1
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*|--*)
            echo "Unknown option $1"
            usage
            exit 1
            ;;
        *)
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
    esac
done

# Restore positional arguments
set -- "${POSITIONAL_ARGS[@]}"

########################################################
# Check arguments and setup environment
########################################################

# Check for required GATEWARE-DIR argument
if [ $# -ne 1 ]; then
    usage
    exit 1
fi

GATEWARE_DIR=$(pwd)/"$1"

if [ ! -d "$GATEWARE_DIR" ]; then
    echo "Error: GATEWARE-DIR does not exist"
    exit 1
fi

BASE_DIR=$(dirname "$(readlink -f "$0")")/..
cd $BASE_DIR

BUILD_DIR="$GATEWARE_DIR/build"
MSS_CONFIG_XML="$BUILD_DIR/mss-config/PF_SOC_MSS_mss_cfg.xml"
HSS_DIR="$BASE_DIR/hart-software-services"
HSS_HEX="$HSS_DIR/build/bootmode1/hss-envm-wrapper-bm1-p0.hex"

# Create build directory
mkdir -p "$BUILD_DIR"

check_tool_status

#####################
# Execute actions
#####################

if [ $SYNTHESIS_ERRORS -eq 1 ]; then
    grep -E "$@E:" $BUILD_DIR/libero/synthesis/DISPLAY_*.srr | less
    exit 0
fi

if [ $FULL_SYNTHESIS_LOG -eq 1 ]; then
    less $BUILD_DIR/libero/synthesis/DISPLAY_*.srr
    exit 0
fi

make_mss_config
build_hss