#!/bin/bash

set -e

# Unset GREP_OPTIONS to avoid deprecation warning
unset GREP_OPTIONS

# Default values
FORCE_HSS=0
PROGRAM=0
BITSTREAM_ONLY=0
CREATE_ONLY=0
SYNTHESIZE_ONLY=0
PROGRAM_ONLY=0
SYNTHESIS_ERRORS=0
SYNTHESIS_WARNINGS=0
FULL_SYNTHESIS_LOG=0
PLACE_AND_ROUTE_LOG=0

DEFAULT_BOARD=mpfs-beaglev-fire
DEVICE=MPFS025T

# Add at the start of the script, after the shebang and set -e:
START_TIME=$(date +%s)

usage() {
    echo "Usage: $0 GATEWARE-DIR [BOARD] [options]"
    echo "Options:"
    echo "  -f, --force-hss           Force the build of the HSS"
    echo "  -p, --program             Program the FPGA/bootloader after building"
    echo "  -c, --create-only         Only create the Libero design, skip the build"
    echo "  -s, --synthesize-only     Only synthesize the design, skip the build"
    echo "  -e, --synthesis-errors    Show synthesis errors from a previous build"
    echo "  -w, --synthesis-warn      Show synthesis warnings from a previous build"
    echo "  -l, --full-synthesis-log  Show the full synthesis log"
    echo "  -r, --pnr-log             Show the place and route log"
    echo "  --program-only            Program the device only, skip the build"
}

# Check if all required tools are available
check_tool_status() {
    # Check for Libero
    if ! command -v libero &> /dev/null; then
        echo "Error: libero not found in path"
        exit 1
    fi

    # Check for PolarFire SoC MSS Configurator
    if ! command -v pfsoc_mss &> /dev/null; then
        echo "Error: polarfire soc mss configurator not found in path"
        exit 1
    fi

    # Check for SoftConsole installation directory
    if [ -z "$SC_INSTALL_DIR" ]; then
        echo "Error: SC_INSTALL_DIR environment variable not set, please set this variable and point it to the"
        echo "appropriate SoftConsole installation directory to run this script"
        exit 1
    fi

    # Check for FPGENPROG environment variable
    if [ -z "$FPGENPROG" ]; then
        echo "Error: FPGENPROG environment variable not set, please set this variable and point it to the appropriate"
        echo "FPGENPROG executable to run this script"
        exit 1
    fi

    # Check for FPExpress if programming is requested
    if [ $PROGRAM -eq 1 ] || [ $PROGRAM_ONLY -eq 1 ]; then
        if ! command -v FPExpress &> /dev/null; then
            echo "Error: FPExpress not found in path"
            exit 1
        fi
    fi

    # Check for RISC-V toolchain
    if ! echo "$PATH" | grep -q "riscv-unknown-elf-gcc"; then
        echo "The path to the RISC-V toolchain needs to be set in PATH to run this script"
        exit 1
    fi
}

make_mss_config() {
    echo "================================================================================"
    echo "                          Generating MSS configuration"
    echo "================================================================================"
    if [ -f "$MSS_CONFIG_XML" ]; then
        echo "MSS configuration already exists, skipping"
        return
    fi

    config_file="$BASE_DIR/MSS.cfg"
    output_dir="$BUILD_DIR/mss-config"
    mkdir -p "$output_dir"

    pfsoc_mss -GENERATE -CONFIGURATION_FILE:$config_file -OUTPUT_DIR:$output_dir
    echo "MSS configuration generated"
}

build_hss() {
    echo "================================================================================"
    echo "                       Build Hart Software Services (HSS)"
    echo "================================================================================"

    if [ -f "$HSS_IMAGE_PATH" ] && [ $FORCE_HSS -eq 0 ]; then
        echo "HSS build skipped"
        return
    fi
    echo "Building HSS for board $BOARD_NAME"

    board_dir="$HSS_DIR/boards/$BOARD_NAME"
    if [ ! -d "$board_dir" ]; then
        echo "Error: Board directory $board_dir does not exist"
        exit 1
    fi

    cd $HSS_DIR
    if [ ! -f ".config" ]; then
        echo "No .config file found in HSS directory, copying default config"
        cp $BASE_DIR/hss.default-config .config
    fi

    echo "Copying MSS configuration"
    cp $MSS_CONFIG_XML $board_dir/soc_fpga_design/xml/

    echo "Building HSS"
    make BOARD=$BOARD_NAME
}

get_design_version() {
    # Get current date info - force base 10 interpretation
    local day_of_year=$((10#$(date +%j)))
    local hour=$((10#$(date +%H)))
    local minute=$((10#$(date +%M)))

    # Calculate design version based on date/time
    # ((day_of_year % 45) * 1440) + (hour * 60) + minute
    local design_version=$(( (day_of_year % 45) * 1440 + hour * 60 + minute ))

    # Ensure it's 16 bits max (65535)
    design_version=$((design_version % 65536))

    echo $design_version
}

correct_path() {
    # Check if we're on Windows (MINGW)
    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
        # Convert /c/... style paths to C:/... style
        echo "$1" | sed -e 's|^/\([a-zA-Z]\)/|\1:/|'
    else
        echo "$1"
    fi
}

generate_libero_project() {
    echo "================================================================================"
    echo "                          Generating Libero project"
    echo "================================================================================"

    DESIGN_VERSION=$(get_design_version)
    echo "Design version: $DESIGN_VERSION"
    echo "Top level name: $TOP_LEVEL_NAME"
    rm -rf $LIBERO_BUILD_DIR
    cd $FPGA_DESIGN_DIR

    local cape_dir=$(correct_path "$GATEWARE_DIR")
    local project_dir=$(correct_path "$LIBERO_BUILD_DIR")
    local hss_path=$(correct_path "$HSS_IMAGE_PATH")
    local prog_path=$(correct_path "$BUILD_DIR")

    local only_do=""
    if [ $CREATE_ONLY -eq 1 ]; then
        only_do=" ONLY_CREATE_DESIGN:1"
    elif [ $SYNTHESIZE_ONLY -eq 1 ]; then
        only_do=" ONLY_SYNTHESIZE:1"
    fi

    local options_file="$cape_dir/OPTIONS"
    local options=""
    if [ -f "$options_file" ]; then
        # Read each line and properly quote/escape the values
        while IFS= read -r line || [ -n "$line" ]; do
            # Skip empty lines
            [ -z "$line" ] && continue
            # Remove any trailing whitespace/carriage returns
            line=$(echo "$line" | tr -d '\r')
            options="$options $line"
        done < "$options_file"
    fi

    local command="libero SCRIPT:BUILD_BVF_GATEWARE.tcl \"SCRIPT_ARGS:CAPE_DIR:$cape_dir PROJECT_LOCATION:$project_dir TOP_LEVEL_NAME:$TOP_LEVEL_NAME HSS_IMAGE_PATH:$hss_path PROG_EXPORT_PATH:$prog_path DESIGN_VERSION:$DESIGN_VERSION$only_do $options\""
    echo $command
    # For some reason, the command doesn't run correctly if we run it directly
    python -c "import subprocess, sys; proc = subprocess.Popen('$command', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT); [sys.stdout.write(line.decode('ascii')) for line in proc.stdout]"
}

clean_fpexpress_project() {
    if [ -d "$BUILD_DIR/FlashProExpress" ]; then
        echo "Cleaning FlashProExpress project"
        rm -rf "$BUILD_DIR/FlashProExpress/$TOP_LEVEL_NAME/"
    fi
}

fp_express_program() {
    echo "================================================================================"
    echo "                          Programming device"
    echo "================================================================================"
    clean_fpexpress_project
    local prog_path=$(correct_path "$BUILD_DIR")
    cd $FPGA_DESIGN_DIR

    local command="FPExpress SCRIPT:PROGRAM_DEVICE.tcl \"SCRIPT_ARGS:TOP_LEVEL_NAME:$TOP_LEVEL_NAME PROG_EXPORT_PATH:$prog_path DEVICE:$DEVICE\""
    echo $command
    python -c "import subprocess, sys; proc = subprocess.Popen('$command', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT); [sys.stdout.write(line.decode('ascii')) for line in proc.stdout]"
}

#####################
# Parse arguments
#####################
POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--force-hss)
            FORCE_HSS=1
            shift
            ;;
        -p|--program)
            PROGRAM=1
            shift
            ;;
        -b|--bitstream-only)
            BITSTREAM_ONLY=1
            shift
            ;;
        -c|--create-only)
            CREATE_ONLY=1
            shift
            ;;
        -s|--synthesize-only)
            SYNTHESIZE_ONLY=1
            shift
            ;;
        -e|--synthesis-errors)
            SYNTHESIS_ERRORS=1
            shift
            ;;
        -w|--synthesis-warn)
            SYNTHESIS_WARNINGS=1
            shift
            ;;
        -l|--full-synthesis-log)
            FULL_SYNTHESIS_LOG=1
            shift
            ;;
        -r|--pnr-log)
            PLACE_AND_ROUTE_LOG=1
            shift
            ;;
        --program-only)
            PROGRAM_ONLY=1
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*|--*)
            echo "Unknown option $1"
            usage
            exit 1
            ;;
        *)
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
    esac
done

# Restore positional arguments
set -- "${POSITIONAL_ARGS[@]}"

########################################################
# Check arguments and setup environment
########################################################

# Check for required GATEWARE-DIR argument and optional BOARD argument
if [ $# -lt 1 ] || [ $# -gt 2 ]; then
    usage
    exit 1
fi

GATEWARE_DIR=$(pwd)/"$1"

# Set board name - use second argument if provided, otherwise use default
if [ $# -eq 2 ]; then
    BOARD_NAME="$2"
else
    BOARD_NAME="$DEFAULT_BOARD"
fi

if [ ! -d "$GATEWARE_DIR" ]; then
    echo "Error: GATEWARE-DIR does not exist"
    exit 1
fi

BASE_DIR=$(dirname "$(readlink -f "$0")")/..
cd $BASE_DIR

BUILD_DIR="$GATEWARE_DIR/build"
HSS_DIR="$BASE_DIR/hart-software-services"
FPGA_DESIGN_DIR="$BASE_DIR/FPGA-design"
MSS_CONFIG_XML="$BUILD_DIR/mss-config/PF_SOC_MSS_mss_cfg.xml"
LIBERO_BUILD_DIR="$BUILD_DIR/libero"
HSS_IMAGE_PATH="$HSS_DIR/build/bootmode1/hss-envm-wrapper-bm1-p0.hex"
TOP_LEVEL_NAME=$(basename "$GATEWARE_DIR")

# Create build directory
mkdir -p "$BUILD_DIR"

check_tool_status

#####################
# Execute actions
#####################

if [ $SYNTHESIS_ERRORS -eq 1 ]; then
    grep -E '^@E:' $BUILD_DIR/libero/synthesis/*.srr | less
    exit 0
fi

if [ $SYNTHESIS_WARNINGS -eq 1 ]; then
set -x
    grep -E '^@W:' $BUILD_DIR/libero/synthesis/*.srr | less
    exit 0
fi

if [ $FULL_SYNTHESIS_LOG -eq 1 ]; then
    less $BUILD_DIR/libero/synthesis/*.srr
    exit 0
fi

if [ $PLACE_AND_ROUTE_LOG -eq 1 ]; then
    less $BUILD_DIR/libero/designer/$TOP_LEVEL_NAME/*_layout_log.log
    exit 0
fi

if [ $PROGRAM_ONLY -eq 1 ]; then
    fp_express_program
    exit 0
fi

make_mss_config
echo
build_hss
echo
generate_libero_project

if [ $PROGRAM -eq 1 ]; then
    fp_express_program
fi

END_TIME=$(date +%s)
ELAPSED=$((END_TIME - START_TIME))
MINUTES=$((ELAPSED / 60))
SECONDS=$((ELAPSED % 60))
echo
echo "Build completed in ${MINUTES}m ${SECONDS}s"